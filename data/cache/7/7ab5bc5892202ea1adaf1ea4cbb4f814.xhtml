
<p>
<a href="http://git-scm.com/" class="media" title="http://git-scm.com/"  rel="nofollow"><img src="/dokuwiki/lib/exe/fetch.php?media=git.png" class="media" alt="" /></a><br/>

Es un sistema de control de revisiones distribuido que tiene enfásis en velocidad e integridad de datos, así como la confiabilidad del mantenimiento de versiones de aplicaciones cuando estas tienen un gran número de archivos de código fuente. Se ha convertido en el sistema de control de versiones más utilizado en el desarrollo de software.
</p>

<h2 class="sectionedit1" id="comandos_basicos">Comandos básicos</h2>
<div class="level2">

<p>
Descarga los cambios realizados en el repositorio remoto:
</p>
<pre class="code">git  fetch</pre>

<p>
Impacta en la rama en la que te encuentras parado, los cambios realizados en la rama “nombre_rama”:
</p>
<pre class="code">git merge &#039;&lt;nombre_rama&gt;&#039; </pre>

<p>
Unifica los comandos <code>fetch</code> y <code>merge</code> en un único comando:
 
</p>
<pre class="code">git pull</pre>

<p>
Confirma los cambios realizados: El “mensaje” generalmente se usa para asociar al <code>commit</code> una breve descripción de los cambios realizados:
 
</p>
<pre class="code">git commit -am &quot;&lt;mensaje&gt;&quot;</pre>

<p>
Sube la rama “nombre_rama” al servidor remoto:
 
</p>
<pre class="code">git push origin &#039;&#039;&lt;nombre_rama&gt;&#039;&#039;</pre>

<p>
Muestra el estado actual de la rama, como los cambios que hay sin commitear:
 
</p>
<pre class="code">git status</pre>

<p>
Comienza a trackear el archivo “nombre_archivo”:
 
</p>
<pre class="code">git add &#039;&#039;&lt;nombre_archivo&gt;&#039;&#039;</pre>

<p>
Crea una rama a partir de la que te encuentres parado con el nombre “nombre_rama_nueva”, y luego salta sobre la rama nueva, por lo que quedas parado en ésta última:
 
</p>
<pre class="code">git checkout -b &#039;&#039;&lt;nombre_rama_nueva&gt;&#039;&#039;</pre>

<p>
Si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre:
 
</p>
<pre class="code">git checkout -t origin/&#039;&#039;&lt;nombre_rama&gt;&#039;&#039;</pre>

<p>
Lista todas las ramas locales:
 
</p>
<pre class="code">git branch</pre>

<p>
Lista todas las ramas locales y remotas:
 
</p>
<pre class="code">git branch -a</pre>

<p>
Elimina la rama local con el nombre “nombre_rama”:
 
</p>
<pre class="code">git branch -d &#039;&#039;&lt;nombre_rama&gt;&#039;&#039;</pre>

<p>
Elimina la rama remote con el nombre “nombre_rama”:
 
</p>
<pre class="code">git push origin &#039;&#039;&lt;nombre_rama&gt;&#039;&#039;</pre>

<p>
Actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota:
 
</p>
<pre class="code">git remote prune origin</pre>

<p>
Elimina los cambios realizados que aún no se hayan hecho <code>commit</code>:
 
</p>
<pre class="code">git reset --hard HEAD</pre>

<p>
Revierte el <code>commit</code> realizado, identificado por el “hash_commit”:
 
</p>
<pre class="code">git revert &#039;&#039;&lt;hash_commit&gt;&#039;&#039;</pre>

</div>
<!-- EDIT1 SECTION "Comandos básicos" [390-2410] -->
<h2 class="sectionedit2" id="buenas_practicas">Buenas prácticas</h2>
<div class="level2">

<p>
Cada desarrollador o equipo de desarrollo puede hacer uso de Git de la forma que le parezca conveniente: Sin embargo una buena práctica es la siguiente<br/>

</p>

<p>
Se deben utilizar 4 tipos de ramas Master, Development, Features, y Hotfix:<br/>

</p>

<p>
<strong>Master</strong><br/>

Es la rama principal: Contiene el repositorio que se encuentra publicado en producción, por lo que debe estar siempre estable:
</p>

<p>
<strong>Development</strong><br/>

Es una rama sacada de master: Es la rama de integración, todas las nuevas funcionalidades se deben integrar en esta rama: Luego que se realice la integración y se corrijan los errores (en caso de haber alguno), es decir que la rama se encuentre estable, se puede hacer un merge de development sobre la rama master.<br/>

</p>

<p>
<strong>Features</strong><br/>

Cada nueva funcionalidad se debe realizar en una rama nueva, específica para esa funcionalidad: Estas se deben sacar de development: Una vez que la funcionalidad esté pronta, se hace un merge de la rama sobre development, donde se integrará con las demás funcionalidades.<br/>

</p>

<p>
<strong>Hotfix</strong><br/>

Son bugs que surgen en producción, por lo que se deben arreglar y publicar de forma urgente: Es por ello, que son ramas sacadas de master: Una vez corregido el error, se debe hacer un merge de la rama sobre master.<br/>

Al final, para que no quede desactualizada, se debe realizar el merge de master sobre development.
</p>

</div>
<!-- EDIT2 SECTION "Buenas prácticas" [2411-] -->